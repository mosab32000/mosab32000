- 👋 Hi, I’m @mosab32000
- 👀 I’m interested in ...
- 🌱 I’m currently learning ...
- 💞️ I’m looking to collaborate on ...
- 📫 How to reach me ...
- 😄 Pronouns: ...
- ⚡ Fun fact: ...
حسنًا، نظرًا للطبيعة المعقدة والشاملة للمشروع وتعدد الملفات، سأقوم بتوفير هيكل المشروع الكامل مع محتويات أساسية وممثلة لكل ملف، بناءً على كل الميزات التي تم ذكرها ودمجها.

ملاحظات هامة قبل البدء:

الرمز البرمجي هو أساس ومثال: هذا الكود يهدف إلى توفير هيكل ونقطة انطلاق. قد يحتاج إلى تعديلات وتصحيحات وتوسيع كبير ليعمل بشكل كامل في بيئة إنتاج حقيقية.

المفاتيح والأسرار: تم استخدام قيم افتراضية أو متغيرات بيئة (os.environ.get). يجب استبدالها بقيم حقيقية وإدارتها بشكل آمن في بيئة حقيقية (لا تضعها مباشرة في الكود).

التبعيات: تأكد من تثبيت جميع المكتبات المذكورة في requirements.txt و package.json.

قاعدة البيانات: يتطلب تشغيل python backend/manage.py makemigrations و python backend/manage.py migrate لإنشاء جداول قاعدة البيانات الأولية.

التكاملات: الأجزاء الخاصة بـ OpenAI, AWS, SendGrid, LMS تحتاج إلى إعداد وتكوين حسابات ومفاتيح API حقيقية.

الأمان: تم تضمين ميزات أمان، لكن الأمان عملية مستمرة وتتطلب مراجعة وتدقيق دائمين. الميزات الخطيرة مثل /nuke تم تضمينها بناءً على الطلبات السابقة ولكن لا يوصى باستخدامها إطلاقاً في بيئة حقيقية دون تدابير أمان صارمة للغاية.

هيكل المشروع:

/task_audit_project/
│
├── .env.example              # Example environment variables
├── .gitignore                # Git ignore file
├── README.md                 # Main project README
│
├── backend/                  # Django Backend
│   ├── task_audit_app/       # Django project folder
│   │   ├── __init__.py
│   │   ├── settings.py       # Django settings
│   │   ├── urls.py           # Main URLs
│   │   ├── wsgi.py
│   │   └── asgi.py           # For potential async features / Channels
│   │
│   ├── tasks/                # Django app for tasks and analysis
│   │   ├── __init__.py
│   │   ├── admin.py
│   │   ├── apps.py
│   │   ├── models.py         # Database models (User, Task, Feedback, etc.)
│   │   ├── serializers.py    # DRF Serializers
│   │   ├── views.py          # API Views (TaskViewSet, analysis endpoints)
│   │   ├── urls.py           # App-specific URLs (if not using router exclusively)
│   │   ├── nlp_analysis.py   # SpaCy, Transformers, TextBlob analysis
│   │   ├── ocr_analysis.py   # Pytesseract OCR analysis
│   │   ├── ml_evaluation.py  # Scikit-learn text evaluation
│   │   ├── lms_integration.py # Placeholder for LMS sync logic
│   │   ├── notifications.py  # Email/DB notification logic
│   │   ├── security_utils.py # Custom security functions (2FA, encryption examples)
│   │   ├── fine_tuning.py    # OpenAI Fine-tuning interaction
│   │   ├── migrations/
│   │   │   └── __init__.py
│   │   └── tests.py          # Basic tests
│   │
│   ├── users/                # Optional: Separate app for user management if needed
│   │   ├── __init__.py
│   │   ├── models.py         # Could extend User model here
│   │   ├── serializers.py
│   │   ├── views.py
│   │   └── ...
│   │
│   ├── staticfiles/          # Collected static files (generated by collectstatic)
│   ├── mediafiles/           # User uploaded files (if not using S3)
│   ├── manage.py             # Django management script
│   └── requirements.txt      # Python dependencies
│
└── frontend/                 # React Frontend
    ├── public/
    │   ├── index.html        # HTML template
    │   └── ...               # Other static assets (favicons, etc.)
    │
    ├── src/
    │   ├── App.js            # Main App component with routing
    │   ├── index.js          # React entry point
    │   ├── axios.js          # Axios base configuration
    │   ├── setupProxy.js     # Optional: Proxy for development API calls
    │   │
    │   ├── components/       # Reusable UI components
    │   │   ├── Layout.js
    │   │   ├── Login.js
    │   │   ├── Register.js
    │   │   ├── TaskList.js
    │   │   ├── TaskItem.js
    │   │   ├── TaskDetail.js
    │   │   ├── UploadTask.js
    │   │   ├── FeedbackForm.js
    │   │   ├── NotificationBell.js
    │   │   ├── LoadingSpinner.js
    │   │   └── ...
    │   │
    │   ├── pages/            # Page-level components
    │   │   ├── HomePage.js
    │   │   ├── LoginPage.js
    │   │   ├── RegisterPage.js
    │   │   ├── DashboardPage.js
    │   │   ├── TaskListPage.js
    │   │   ├── TaskDetailPage.js
    │   │   ├── SettingsPage.js
    │   │   └── ...
    │   │
    │   ├── contexts/         # React Context API (e.g., AuthContext)
    │   │   └── AuthContext.js
    │   │
    │   ├── hooks/            # Custom React Hooks
    │   │   └── useAuth.js
    │   │
    │   ├── services/         # API call functions
    │   │   ├── authService.js
    │   │   └── taskService.js
    │   │
    │   └── assets/           # Images, custom fonts, etc.
    │
    ├── package.json          # Node.js dependencies
    ├── package-lock.json
    └── README.md             # Frontend specific README


محتويات الملفات (أمثلة ومقتطفات رئيسية):

1. /task_audit_project/.env.example

# Django Settings
DJANGO_SECRET_KEY='your-super-secret-key-here' # CHANGE THIS!
DJANGO_DEBUG=True
DJANGO_ALLOWED_HOSTS='localhost,127.0.0.1'

# Database (Example for PostgreSQL, SQLite is default in settings.py for dev)
# DATABASE_URL='postgres://user:password@host:port/dbname'

# OpenAI API Key
OPENAI_API_KEY='your-openai-api-key'

# AWS S3 Storage (Optional)
AWS_ACCESS_KEY_ID='your-aws-access-key-id'
AWS_SECRET_ACCESS_KEY='your-aws-secret-access-key'
AWS_STORAGE_BUCKET_NAME='your-s3-bucket-name'
AWS_S3_REGION_NAME='your-s3-region' # e.g., us-east-1
AWS_S3_ENDPOINT_URL='' # Optional: For S3 compatible storage

# SendGrid API Key (Optional)
SENDGRID_API_KEY='your-sendgrid-api-key'
DEFAULT_FROM_EMAIL='noreply@yourapp.com'

# Redis URL (Optional)
REDIS_URL='redis://127.0.0.1:6379/1'

# Google OAuth (Optional)
GOOGLE_OAUTH_CLIENT_ID='your-google-client-id'
GOOGLE_OAUTH_CLIENT_SECRET='your-google-client-secret'

# Other API Keys
FIGMA_API_KEY='your-figma-api-key' # Example if needed

# Tesseract OCR Path (If not in system PATH)
# TESSERACT_CMD='/usr/local/bin/tesseract'
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Dotenv
IGNORE_WHEN_COPYING_END

2. /task_audit_project/.gitignore

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
*.egg-info/
dist/
build/
*.env
.env.*
env/
venv/
ENV/
*.sqlite3
*.bak

# Django
db.sqlite3
db.sqlite3-journal
staticfiles/
mediafiles/ # If not using S3 or you want to ignore local media

# Node
node_modules/
npm-debug.log
yarn-error.log
coverage/
build/ # React build output

# IDE / OS specific
.idea/
.vscode/
*.sublime-project
*.sublime-workspace
*.DS_Store
Thumbs.db
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Gitignore
IGNORE_WHEN_COPYING_END

3. /task_audit_project/README.md

# Task Audit & Evaluation Project

This project provides a platform for managing, auditing, and evaluating tasks, leveraging AI for analysis and feedback.

## Features

*   User Authentication (Django Allauth, JWT)
*   Task Management (CRUD)
*   AI-Powered Text Analysis (GPT-4, SpaCy, Transformers, TextBlob)
*   OCR for Handwritten/Printed Text Analysis (Pytesseract)
*   Machine Learning based Text Evaluation (Scikit-learn)
*   LMS Integration (Placeholder)
*   Notifications (Email/DB)
*   Cloud Storage (AWS S3)
*   Caching (Redis)
*   Security Features (CSP, 2FA option)
*   React Frontend with Material UI
*   Docker & Kubernetes support (config files included)
*   And more...

## Setup

### Prerequisites

*   Python 3.8+
*   Node.js & npm (or yarn)
*   PostgreSQL (Recommended for production) or SQLite (Default for dev)
*   Redis (Optional, for caching)
*   Tesseract OCR Engine

### Backend Setup

1.  **Clone the repository:**
    ```bash
    git clone <repository-url>
    cd task_audit_project
    ```
2.  **Create and activate a virtual environment:**
    ```bash
    python -m venv backend/venv
    source backend/venv/bin/activate  # Linux/macOS
    # backend\venv\Scripts\activate  # Windows
    ```
3.  **Install Python dependencies:**
    ```bash
    pip install -r backend/requirements.txt
    ```
4.  **Set up environment variables:**
    *   Copy `.env.example` to `.env`.
    *   Fill in your actual secrets and configurations in `.env`.
    ```bash
    cp .env.example .env
    nano .env # Or your favorite editor
    ```
5.  **Apply database migrations:**
    ```bash
    python backend/manage.py makemigrations
    python backend/manage.py migrate
    ```
6.  **(Optional) Create a superuser:**
    ```bash
    python backend/manage.py createsuperuser
    ```
7.  **Run the development server:**
    ```bash
    python backend/manage.py runserver
    ```
    The backend API will be available at `http://127.0.0.1:8000/`.

### Frontend Setup

1.  **Navigate to the frontend directory:**
    ```bash
    cd frontend
    ```
2.  **Install Node.js dependencies:**
    ```bash
    npm install
    # or yarn install
    ```
3.  **Run the development server:**
    ```bash
    npm start
    # or yarn start
    ```
    The frontend application will be available at `http://localhost:3000/`.

## Deployment

Refer to the Dockerfile and Kubernetes configuration files for deployment instructions. Ensure environment variables are properly configured in your deployment environment.

## Important Notes

*   **Security:** Review all security configurations before deploying to production. Do NOT use default secret keys or expose sensitive information. The `/nuke` endpoint is highly experimental and dangerous.
*   **API Keys:** Ensure all external API keys (OpenAI, AWS, SendGrid, etc.) are correctly set and secured.
*   **LMS Integration:** The LMS sync logic is a placeholder and needs implementation based on the specific LMS API.

## Contributing

[Details about contributing guidelines if applicable]
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Markdown
IGNORE_WHEN_COPYING_END

4. backend/requirements.txt

# Core Django & Web Framework
Django>=4.0,<5.0
djangorestframework
django-cors-headers
gunicorn # For production deployment
python-dotenv # To load .env file

# Database (Choose one or add based on settings)
# psycopg2-binary # For PostgreSQL
# mysqlclient # For MySQL

# AI / ML / NLP / OCR
openai>=1.0.0 # Check OpenAI library version for specific methods
spacy
# Download spacy model: python -m spacy download en_core_web_sm
transformers[torch] # Or transformers[tensorflow]
torch # Or tensorflow
scikit-learn
Pillow # Image processing for OCR
pytesseract # OCR engine wrapper
textblob

# Authentication & Authorization
django-allauth
djangorestframework-simplejwt # Alternative JWT implementation if not using DRF default tokens

# Security & Encryption
bcrypt # For password hashing examples if not relying solely on Django
pyotp # For 2FA
cryptography # For Fernet encryption examples
django-csp # Content Security Policy

# Cloud Services & External APIs
django-storages[boto3] # For AWS S3
boto3
sendgrid # For email
requests # For making HTTP requests (e.g., to LMS)

# Caching
django-redis
redis # The redis client library

# Data Analysis & Visualization (Optional Backend Plotting)
pandas
matplotlib

# Optional: Real-time / Async
# channels
# channels-redis

# Other Utilities
pyttsx3 # Text-to-speech
# google-cloud-vision # If using Google Vision API for OCR/Analysis
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Txt
IGNORE_WHEN_COPYING_END

5. backend/task_audit_app/settings.py (Key Sections)

import os
from pathlib import Path
from dotenv import load_dotenv
import dj_database_url # To parse DATABASE_URL

# Load environment variables from .env file
load_dotenv(Path(__file__).resolve().parent.parent.parent / '.env')

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-fallback-key-change-me') # MUST change in production

DEBUG = os.environ.get('DJANGO_DEBUG', 'False') == 'True'

ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'rest_framework.authtoken', # Or use JWT
    'corsheaders',
    'django.contrib.sites', # Required by allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google', # Example provider
    'storages', # For AWS S3 etc.
    # 'sendgrid', # If using the sendgrid-django library specifically
    'django_redis', # For Redis cache
    'csp', # Content Security Policy

    # Your apps
    'tasks',
    # 'users', # If you have a separate users app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # For serving static files in prod (simple way)
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # CORS Middleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware', # Allauth middleware
    'csp.middleware.CSPMiddleware', # CSP Middleware
]

ROOT_URLCONF = 'task_audit_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # Optional global templates dir
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request', # Required by allauth
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'task_audit_app.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Use DATABASE_URL from environment if available (for production)
DATABASE_URL = os.environ.get('DATABASE_URL')
if DATABASE_URL:
    DATABASES['default'] = dj_database_url.config(
        default=DATABASE_URL,
        conn_max_age=600, # Optional: connection pooling
        conn_health_checks=True, # Optional
    )


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us' # Or 'ar' etc.
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # For collectstatic
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Optional global static dir
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' # For Whitenoise

# Media files (User Uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Third-Party App Settings ---

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication', # Simple token auth
        'rest_framework.authentication.SessionAuthentication', # For Browsable API / Allauth session
        # 'rest_framework_simplejwt.authentication.JWTAuthentication', # If using SimpleJWT
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly', # Example default
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

# CORS Headers - Adjust as needed for security
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000", # React dev server
    "http://127.0.0.1:3000",
]
# Alternatively, allow all for development (less secure):
# CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

# Django Allauth
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend', # Default Django auth
    'allauth.account.auth_backends.AuthenticationBackend', # Allauth specific
]
SITE_ID = 1 # Required by allauth
ACCOUNT_EMAIL_VERIFICATION = 'optional' # Or 'mandatory' or 'none'
ACCOUNT_AUTHENTICATION_METHOD = 'username_email' # Allow login with username or email
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False # If using email as primary identifier
LOGIN_REDIRECT_URL = '/' # Where to redirect after login (adjust for frontend)
LOGOUT_REDIRECT_URL = '/' # Where to redirect after logout (adjust for frontend)
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.environ.get('GOOGLE_OAUTH_CLIENT_ID'),
            'secret': os.environ.get('GOOGLE_OAUTH_CLIENT_SECRET'),
            'key': '' # Not typically used for Google
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}

# AWS S3 Storage (using django-storages)
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME')
AWS_S3_ENDPOINT_URL = os.environ.get('AWS_S3_ENDPOINT_URL') # Optional for S3 compatible
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com' # Or your CloudFront domain
AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
AWS_LOCATION = 'media' # Subdirectory within the bucket for media files
AWS_QUERYSTRING_AUTH = False # Make files publicly readable if needed, depends on bucket policy

# Use S3 for file storage if configured
if AWS_STORAGE_BUCKET_NAME:
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    # Optional: Use S3 for static files too (more complex setup)
    # STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    # AWS_STATIC_LOCATION = 'static'


# Email Settings (using SendGrid)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # Default SMTP
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'apikey' # This is literal string 'apikey' for SendGrid API key auth
EMAIL_HOST_PASSWORD = os.environ.get('SENDGRID_API_KEY')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'webmaster@localhost')

# Caching (using Redis)
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379/1'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

# Content Security Policy (CSP) - CONFIGURE CAREFULLY FOR PRODUCTION
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'", "'unsafe-eval'", "http://localhost:3000", "https://cdn.tailwindcss.com") # Allow React dev server, inline scripts (often needed by libraries), eval (less secure), tailwind cdn
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'", "https://cdnjs.cloudflare.com", "https://fonts.googleapis.com") # Allow inline styles, font awesome, google fonts
CSP_IMG_SRC = ("'self'", "data:")
CSP_FONT_SRC = ("'self'", "https://cdnjs.cloudflare.com", "https://fonts.googleapis.com", "https://fonts.gstatic.com")
CSP_CONNECT_SRC = ("'self'", "http://localhost:8000", "ws://localhost:8000", "https://api.openai.com", "https://api.qwen.com", "https://api.figma.com") # Allow backend API, websockets, external APIs
CSP_FRAME_ANCESTORS = ("'none'",) # Prevent clickjacking

# OpenAI API Key
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')

# Tesseract OCR Command Path (Optional)
TESSERACT_CMD = os.environ.get('TESSERACT_CMD')
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Python
IGNORE_WHEN_COPYING_END

6. backend/task_audit_app/urls.py

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/tasks/', include('tasks.urls')), # App specific URLs first if needed
    path('api/auth/', include('rest_framework.urls')), # Browsable API login/logout
    path('api/accounts/', include('allauth.urls')), # Allauth URLs (for social etc.)
    # Add other app URLs here ('api/users/' etc.)
]

# Serve media files during development
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) # Can be useful sometimes

# Add other URL patterns for specific features if not handled by apps/routers
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Python
IGNORE_WHEN_COPYING_END

7. backend/tasks/models.py

from django.db import models
from django.contrib.auth.models import User
from django.conf import settings # To get AUTH_USER_MODEL if customized

# Consider using settings.AUTH_USER_MODEL instead of User directly if you might customize it
# from django.contrib.auth import get_user_model
# User = get_user_model()

class Task(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True) # Description provided by user
    student_name = models.CharField(max_length=200, blank=True, null=True) # If different from owner
    uploaded_file = models.FileField(upload_to='task_uploads/', blank=True, null=True)
    criteria = models.TextField(blank=True, null=True) # Evaluation criteria
    deadline = models.DateTimeField(blank=True, null=True)

    # Relationships
    owner = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='owned_tasks', on_delete=models.CASCADE)
    assigned_evaluator = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='assigned_tasks', on_delete=models.SET_NULL, blank=True, null=True)

    # Status & Feedback
    approved = models.BooleanField(default=False)
    ai_feedback = models.TextField(blank=True, null=True) # Feedback generated by AI
    ai_evaluation_score = models.FloatField(blank=True, null=True) # e.g., ML model score
    ai_bias_score = models.FloatField(blank=True, null=True) # Example bias score
    ai_creativity_score = models.FloatField(blank=True, null=True) # Example creativity score

    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.title} (Owner: {self.owner.username})"

class Feedback(models.Model):
    task = models.ForeignKey(Task, related_name='human_feedback', on_delete=models.CASCADE)
    evaluator = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    comment = models.TextField()
    rating = models.PositiveSmallIntegerField(blank=True, null=True) # e.g., 1-5 star rating
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Feedback on '{self.task.title}' by {self.evaluator.username}"

class Notification(models.Model):
    recipient = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='notifications', on_delete=models.CASCADE)
    message = models.TextField()
    read = models.BooleanField(default=False)
    link = models.URLField(blank=True, null=True) # Optional link related to notification
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Notification for {self.recipient.username}: {self.message[:50]}..."

class Reminder(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='reminders', on_delete=models.CASCADE)
    task = models.ForeignKey(Task, related_name='reminders', on_delete=models.CASCADE, blank=True, null=True) # Optional link to a task
    message = models.TextField()
    reminder_datetime = models.DateTimeField()
    sent = models.BooleanField(default=False) # To track if the reminder was processed/sent
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Reminder for {self.user.username} at {self.reminder_datetime}"

# Add other models as needed (e.g., AnalyticsLog, Lesson, UserProfile for 2FA secret)
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Python
IGNORE_WHEN_COPYING_END

8. backend/tasks/serializers.py

from rest_framework import serializers
from django.contrib.auth.models import User
from .models import Task, Feedback, Notification, Reminder

class UserSerializer(serializers.ModelSerializer):
    """Basic User Serializer for relationships"""
    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'first_name', 'last_name']

class FeedbackSerializer(serializers.ModelSerializer):
    evaluator = UserSerializer(read_only=True)
    evaluator_id = serializers.PrimaryKeyRelatedField(
        queryset=User.objects.all(), source='evaluator', write_only=True
    )

    class Meta:
        model = Feedback
        fields = ['id', 'task', 'evaluator', 'evaluator_id', 'comment', 'rating', 'created_at']
        read_only_fields = ['id', 'created_at', 'evaluator']

class TaskSerializer(serializers.ModelSerializer):
    owner = UserSerializer(read_only=True)
    assigned_evaluator = UserSerializer(read_only=True)
    human_feedback = FeedbackSerializer(many=True, read_only=True) # Nested feedback display
    # Use PrimaryKeyRelatedField for write operations on relationships
    owner_id = serializers.PrimaryKeyRelatedField(
        queryset=User.objects.all(), source='owner', write_only=True, required=False # Set based on request user
    )
    assigned_evaluator_id = serializers.PrimaryKeyRelatedField(
        queryset=User.objects.all(), source='assigned_evaluator', write_only=True, required=False, allow_null=True
    )

    class Meta:
        model = Task
        fields = [
            'id', 'title', 'description', 'student_name', 'uploaded_file',
            'criteria', 'deadline', 'owner', 'owner_id', 'assigned_evaluator',
            'assigned_evaluator_id', 'approved', 'ai_feedback',
            'ai_evaluation_score', 'ai_bias_score', 'ai_creativity_score',
            'created_at', 'updated_at', 'human_feedback'
        ]
        read_only_fields = [
            'id', 'created_at', 'updated_at', 'owner', 'assigned_evaluator',
            'ai_feedback', 'ai_evaluation_score', 'ai_bias_score',
            'ai_creativity_score', 'human_feedback'
        ]

    def create(self, validated_data):
        # Automatically set owner to the request user
        validated_data['owner'] = self.context['request'].user
        return super().create(validated_data)

class NotificationSerializer(serializers.ModelSerializer):
    recipient = UserSerializer(read_only=True)

    class Meta:
        model = Notification
        fields = ['id', 'recipient', 'message', 'read', 'link', 'created_at']
        read_only_fields = ['id', 'created_at', 'recipient']

class ReminderSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)
    user_id = serializers.PrimaryKeyRelatedField(
        queryset=User.objects.all(), source='user', write_only=True, required=False
    )
    task_id = serializers.PrimaryKeyRelatedField(
        queryset=Task.objects.all(), source='task', write_only=True, required=False, allow_null=True
    )

    class Meta:
        model = Reminder
        fields = ['id', 'user', 'user_id', 'task', 'task_id', 'message', 'reminder_datetime', 'sent', 'created_at']
        read_only_fields = ['id', 'created_at', 'user', 'sent']

    def create(self, validated_data):
        validated_data['user'] = self.context['request'].user
        return super().create(validated_data)

# Add other serializers (e.g., UserProfileSerializer for 2FA)
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Python
IGNORE_WHEN_COPYING_END

9. backend/tasks/views.py (Key Sections of TaskViewSet and other views)

from rest_framework import viewsets, permissions, status, generics
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.parsers import MultiPartParser, FormParser
from django.shortcuts import get_object_or_404
from django.contrib.auth.models import User
from django.http import JsonResponse # For simpler responses
from django.utils import timezone
from django.conf import settings
import openai # Make sure OpenAI client is initialized

from .models import Task, Feedback, Notification, Reminder
from .serializers import TaskSerializer, FeedbackSerializer, NotificationSerializer, ReminderSerializer
from .nlp_analysis import analyze_text_spacy_transformers, analyze_sentiment_textblob
from .ocr_analysis import analyze_image_ocr
from .ml_evaluation import evaluate_text_ml
from .lms_integration import sync_grades_to_lms # Placeholder
from .notifications import send_email_notification_async, create_db_notification # Placeholders
# from .security_utils import verify_2fa_token # Example import
# from .fine_tuning import start_openai_fine_tune # Example import

# Initialize OpenAI client (do this properly, maybe in apps.py ready() method or settings)
if settings.OPENAI_API_KEY:
    openai.api_key = settings.OPENAI_API_KEY
else:
    print("Warning: OPENAI_API_KEY not set.")

class IsOwnerOrReadOnly(permissions.BasePermission):
    """ Allow owners of an object to edit it, otherwise read-only. """
    def has_object_permission(self, request, view, obj):
        if request.method in permissions.SAFE_METHODS:
            return True
        return obj.owner == request.user

class IsEvaluatorOrAdmin(permissions.BasePermission):
    """ Allow users with role 'evaluator' or admins to perform actions. """
    def has_permission(self, request, view):
        # Implement logic to check user role (e.g., via user profile or groups)
        return request.user and (request.user.is_staff or hasattr(request.user, 'profile') and request.user.profile.role == 'evaluator')

    def has_object_permission(self, request, view, obj):
         # Allow if user is assigned evaluator or admin
        is_assigned = obj.assigned_evaluator == request.user
        return request.user and (request.user.is_staff or is_assigned or hasattr(request.user, 'profile') and request.user.profile.role == 'evaluator')

class TaskViewSet(viewsets.ModelViewSet):
    queryset = Task.objects.all().order_by('-created_at')
    serializer_class = TaskSerializer
    parser_classes = (MultiPartParser, FormParser) # To handle file uploads

    def get_permissions(self):
        """Instantiates and returns the list of permissions that this view requires."""
        if self.action in ['update', 'partial_update', 'destroy']:
            permission_classes = [permissions.IsAuthenticated, IsOwnerOrReadOnly]
        elif self.action in ['analyze_content', 'evaluate_content', 'approve', 'assign']:
             permission_classes = [permissions.IsAuthenticated, IsEvaluatorOrAdmin] # Or adjust based on who can trigger analysis/approval
        elif self.action == 'create':
            permission_classes = [permissions.IsAuthenticated]
        else: # list, retrieve
            permission_classes = [permissions.IsAuthenticatedOrReadOnly]
        return [permission() for permission in permission_classes]

    def perform_create(self, serializer):
        # Owner is set in serializer context
        serializer.save()

    def get_queryset(self):
        """ Optionally restricts the returned tasks to a given user,
            by filtering against a `username` query parameter in the URL.
        """
        queryset = Task.objects.all().select_related('owner', 'assigned_evaluator').prefetch_related('human_feedback').order_by('-created_at')
        owner_username = self.request.query_params.get('owner')
        evaluator_username = self.request.query_params.get('evaluator')

        if owner_username is not None:
            queryset = queryset.filter(owner__username=owner_username)
        if evaluator_username is not None:
            queryset = queryset.filter(assigned_evaluator__username=evaluator_username)

        # Maybe filter based on user role?
        # if not self.request.user.is_staff:
        #     queryset = queryset.filter(owner=self.request.user) | queryset.filter(assigned_evaluator=self.request.user)

        return queryset.distinct()


    @action(detail=True, methods=['post'], permission_classes=[permissions.IsAuthenticated]) # Adjust permissions
    def analyze_content(self, request, pk=None):
        """
        Analyzes task description or uploaded file using AI/NLP/OCR.
        """
        task = self.get_object()
        text_to_analyze = task.description
        analysis_results = {}

        # 1. OCR if file exists and no description
        if task.uploaded_file and not text_to_analyze:
            try:
                text_to_analyze = analyze_image_ocr(task.uploaded_file.path)
                analysis_results['ocr_text'] = text_to_analyze
                if not text_to_analyze:
                     return Response({'error': 'OCR failed or no text found in image.'}, status=status.HTTP_400_BAD_REQUEST)
            except Exception as e:
                return Response({'error': f'OCR processing failed: {str(e)}'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

        if not text_to_analyze:
            return Response({'error': 'No text content found in description or file to analyze.'}, status=status.HTTP_400_BAD_REQUEST)

        # 2. NLP Analysis (SpaCy/Transformers)
        try:
            nlp_errors, nlp_sentiment = analyze_text_spacy_transformers(text_to_analyze)
            analysis_results['nlp_errors'] = nlp_errors
            analysis_results['nlp_sentiment'] = nlp_sentiment
        except Exception as e:
            analysis_results['nlp_error'] = f'NLP analysis failed: {str(e)}'

        # 3. Sentiment Analysis (TextBlob)
        try:
            blob_sentiment = analyze_sentiment_textblob(text_to_analyze)
            analysis_results['textblob_sentiment'] = blob_sentiment
        except Exception as e:
            analysis_results['textblob_error'] = f'TextBlob analysis failed: {str(e)}'

        # 4. GPT-4 Analysis (Optional, can be separate action)
        use_gpt = request.data.get('use_gpt', False)
        if use_gpt and openai.api_key:
             try:
                 prompt = f"""Analyze the following student task submission based on the criteria: "{task.criteria}".
                 Submission Text: "{text_to_analyze}"
                 Provide detailed feedback, strengths, weaknesses, and suggestions for improvement according to Pearson BTEC standards. Identify potential bias."""
                 response = openai.chat.completions.create( # Check latest OpenAI SDK syntax
                     model="gpt-4", # Or fine-tuned model ID
                     messages=[
                         {"role": "system", "content": "You are an expert BTEC evaluator AI assistant."},
                         {"role": "user", "content": prompt}
                     ],
                     max_tokens=700,
                     temperature=0.7,
                 )
                 gpt_feedback = response.choices[0].message.content
                 task.ai_feedback = gpt_feedback # Save GPT feedback
                 analysis_results['gpt_feedback'] = gpt_feedback
             except Exception as e:
                 analysis_results['gpt_error'] = f'GPT-4 analysis failed: {str(e)}'


        # Save analysis results? (e.g., update task.ai_feedback if only using one source)
        task.save() # Save if AI feedback was updated

        return Response(analysis_results)

    @action(detail=True, methods=['post'], permission_classes=[permissions.IsAuthenticated]) # Adjust permissions
    def evaluate_content(self, request, pk=None):
        """
        Evaluates task content using the ML model.
        """
        task = self.get_object()
        text_to_evaluate = task.ai_feedback or task.description # Evaluate AI feedback or original text

        if task.uploaded_file and not text_to_evaluate:
             try:
                 text_to_evaluate = analyze_image_ocr(task.uploaded_file.path)
                 if not text_to_evaluate:
                      return Response({'error': 'OCR failed or no text found in image.'}, status=status.HTTP_400_BAD_REQUEST)
             except Exception as e:
                 return Response({'error': f'OCR processing failed: {str(e)}'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

        if not text_to_evaluate:
            return Response({'error': 'No text content found to evaluate.'}, status=status.HTTP_400_BAD_REQUEST)

        try:
            evaluation_label, evaluation_score = evaluate_text_ml(text_to_evaluate)
            task.ai_evaluation_score = evaluation_score # Save score
            task.save()
            return Response({
                'evaluation_label': evaluation_label,
                'evaluation_score': evaluation_score
            })
        except Exception as e:
            return Response({'error': f'ML evaluation failed: {str(e)}'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @action(detail=True, methods=['post'], permission_classes=[IsEvaluatorOrAdmin])
    def approve(self, request, pk=None):
        """Marks a task as approved."""
        task = self.get_object()
        task.approved = True
        task.save()
        # Notify owner?
        create_db_notification(task.owner, f"Your task '{task.title}' has been approved.")
        # send_email_notification_async.delay(task.owner.email, "Task Approved", f"Your task '{task.title}' has been approved.") # Using Celery example
        return Response({'status': 'task approved'})

    @action(detail=True, methods=['post'], permission_classes=[IsEvaluatorOrAdmin]) # Or admin only
    def assign(self, request, pk=None):
        """Assigns a task to an evaluator."""
        task = self.get_object()
        evaluator_id = request.data.get('evaluator_id')
        try:
            evaluator = User.objects.get(pk=evaluator_id)
            # Add check: ensure user is actually an evaluator
            task.assigned_evaluator = evaluator
            task.save()
            # Notify evaluator?
            create_db_notification(evaluator, f"You have been assigned task: '{task.title}'.")
            return Response(TaskSerializer(task).data)
        except User.DoesNotExist:
            return Response({'error': 'Evaluator not found.'}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
             return Response({'error': f'Assignment failed: {str(e)}'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

# --- Other Views (Examples) ---

class FeedbackListCreateView(generics.ListCreateAPIView):
    serializer_class = FeedbackSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        task_id = self.kwargs.get('task_id') # Get task_id from URL
        return Feedback.objects.filter(task_id=task_id).order_by('-created_at')

    def perform_create(self, serializer):
        task_id = self.kwargs.get('task_id')
        task = get_object_or_404(Task, pk=task_id)
        # Check if user is owner or evaluator of the task before allowing feedback?
        # if task.owner != self.request.user and task.assigned_evaluator != self.request.user:
        #     raise PermissionDenied("You cannot add feedback to this task.")
        serializer.save(evaluator=self.request.user, task=task)

class NotificationListView(generics.ListAPIView):
    serializer_class = NotificationSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return Notification.objects.filter(recipient=self.request.user).order_by('-created_at')

class NotificationMarkReadView(generics.UpdateAPIView):
     serializer_class = NotificationSerializer
     permission_classes = [permissions.IsAuthenticated]
     queryset = Notification.objects.all()
     lookup_field = 'pk'

     def get_object(self):
         obj = super().get_object()
         if obj.recipient != self.request.user:
             raise PermissionDenied("Cannot modify this notification.")
         return obj

     def perform_update(self, serializer):
         serializer.save(read=True)


class ReminderListCreateView(generics.ListCreateAPIView):
    serializer_class = ReminderSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return Reminder.objects.filter(user=self.request.user).order_by('reminder_datetime')

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)


# --- Potentially Dangerous / Experimental Views ---

from django.db import connection

@action(detail=False, methods=['post'], permission_classes=[permissions.IsAdminUser]) # ADMIN ONLY! EXTREMELY DANGEROUS!
def nuke_system(request):
     """ !!! EXTREMELY DANGEROUS - DO NOT USE IN PRODUCTION LIGHTLY !!! """
     # Add multiple layers of confirmation and checks here!
     confirmation = request.data.get('confirmation_phrase')
     if confirmation != "CONFIRM_NUKE_PROCEDURE_11001010101": # Example confirmation
         return Response({'error': 'Nuke confirmation failed.'}, status=status.HTTP_403_FORBIDDEN)

     try:
         with connection.cursor() as cursor:
             # Order matters due to foreign keys
             cursor.execute("DROP TABLE IF EXISTS tasks_feedback;")
             cursor.execute("DROP TABLE IF EXISTS tasks_reminder;")
             cursor.execute("DROP TABLE IF EXISTS tasks_notification;")
             cursor.execute("DROP TABLE IF EXISTS tasks_task;")
             # Add other app tables here
             # cursor.execute("DROP TABLE IF EXISTS users_userprofile;") # If exists
             # Drop auth/allauth tables if necessary (VERY risky)
             # cursor.execute("DROP TABLE IF EXISTS auth_user_groups;")
             # ... more tables ...
             # cursor.execute("DROP TABLE IF EXISTS auth_user;") # Finally drop user table

         return Response({'status': 'SYSTEM_ERASE_ATTEMPTED_CHECK_LOGS'})
     except Exception as e:
         return Response({'error': f'Nuke procedure failed: {str(e)}'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

# Add views for /sync_lms, /fine_tune_model, /text_to_speech, /backup_db, analytics etc. following similar patterns
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Python
IGNORE_WHEN_COPYING_END

10. backend/tasks/urls.py

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from . import views

# Create a router and register our viewsets with it.
router = DefaultRouter()
router.register(r'', views.TaskViewSet, basename='task') # Register TaskViewSet at the base URL ('api/tasks/')

# The API URLs are now determined automatically by the router.
urlpatterns = [
    path('', include(router.urls)), # Include router URLs

    # Add URLs for non-ViewSet views
    path('<int:task_id>/feedback/', views.FeedbackListCreateView.as_view(), name='task-feedback-list-create'),
    path('notifications/', views.NotificationListView.as_view(), name='notification-list'),
    path('notifications/<int:pk>/mark_read/', views.NotificationMarkReadView.as_view(), name='notification-mark-read'),
    path('reminders/', views.ReminderListCreateView.as_view(), name='reminder-list-create'),
    # path('nuke/', views.nuke_system, name='nuke-system'), # Add if needed, PROTECT IT WELL!

    # Add URLs for other specific actions
    # path('lms/sync/', views.sync_lms_view, name='lms-sync'),
    # path('ai/fine_tune/', views.fine_tune_view, name='ai-fine-tune'),
]
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Python
IGNORE_WHEN_COPYING_END

11. backend/tasks/nlp_analysis.py

import spacy
from transformers import pipeline as transformers_pipeline
from textblob import TextBlob
import logging

logger = logging.getLogger(__name__)

# Load models (consider loading lazily or in apps.py ready())
try:
    nlp_spacy = spacy.load('en_core_web_sm')
except OSError:
    logger.warning("Spacy 'en_core_web_sm' model not found. Download it: python -m spacy download en_core_web_sm")
    nlp_spacy = None

try:
    # Using a more general sentiment model
    sentiment_pipeline = transformers_pipeline('sentiment-analysis', model='distilbert-base-uncased-finetuned-sst-2-english')
except Exception as e:
    logger.warning(f"Could not load Hugging Face sentiment pipeline: {e}")
    sentiment_pipeline = None

def analyze_text_spacy_transformers(text):
    """Analyzes text using SpaCy for basic grammar and Transformers for sentiment."""
    errors = []
    sentiment_result = {'label': 'N/A', 'score': 0.0}

    # SpaCy basic analysis (example: check POS tags)
    if nlp_spacy:
        try:
            doc = nlp_spacy(text)
            # Example: Flag unusual POS sequences or simple errors (this needs refinement)
            for token in doc:
                if token.pos_ == 'VERB' and token.morph.get("VerbForm") == ["Inf"]:
                    if token.i > 0 and doc[token.i - 1].pos_ not in ['AUX', 'PART']:
                         errors.append({'token': token.text, 'issue': 'Potential bare infinitive', 'pos': token.pos_})
                # Add more sophisticated grammar checks here
        except Exception as e:
            logger.error(f"SpaCy analysis failed: {e}")
            errors.append({'issue': 'SpaCy analysis failed'})

    # Transformers Sentiment Analysis
    if sentiment_pipeline:
        try:
            results = sentiment_pipeline(text)
            if results:
                sentiment_result = results[0] # Get the first result
        except Exception as e:
            logger.error(f"Transformers sentiment analysis failed: {e}")
            sentiment_result = {'label': 'Error', 'score': 0.0}

    return errors, sentiment_result

def analyze_sentiment_textblob(text):
    """Analyzes sentiment using TextBlob."""
    try:
        blob = TextBlob(text)
        sentiment = blob.sentiment
        return {'polarity': sentiment.polarity, 'subjectivity': sentiment.subjectivity}
    except Exception as e:
        logger.error(f"TextBlob analysis failed: {e}")
        return {'polarity': 0.0, 'subjectivity': 0.0, 'error': str(e)}

# Add functions for BERT analysis, bias detection etc. here
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Python
IGNORE_WHEN_COPYING_END

12. backend/tasks/ocr_analysis.py

import pytesseract
from PIL import Image
import logging
from django.conf import settings

logger = logging.getLogger(__name__)

# Set Tesseract command path if specified in settings
if settings.TESSERACT_CMD:
    pytesseract.pytesseract.tesseract_cmd = settings.TESSERACT_CMD

def analyze_image_ocr(image_path_or_file):
    """Performs OCR on an image file."""
    try:
        img = Image.open(image_path_or_file)
        # Preprocessing steps could be added here (e.g., grayscale, thresholding)
        text = pytesseract.image_to_string(img, lang='eng') # Specify language(s)
        logger.info(f"OCR successful for: {image_path_or_file}")
        return text.strip()
    except FileNotFoundError:
        logger.error(f"OCR Error: File not found at {image_path_or_file}")
        raise
    except pytesseract.TesseractNotFoundError:
        logger.error("OCR Error: Tesseract executable not found or not configured correctly. Check TESSERACT_CMD setting or system PATH.")
        raise RuntimeError("Tesseract not found")
    except Exception as e:
        logger.error(f"OCR analysis failed for {image_path_or_file}: {e}")
        raise # Re-raise the exception
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Python
IGNORE_WHEN_COPYING_END

13. backend/tasks/ml_evaluation.py

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import joblib # For saving/loading model
import os
import logging
from django.conf import settings

logger = logging.getLogger(__name__)

MODEL_PATH = os.path.join(settings.BASE_DIR, 'tasks', 'ml_models', 'text_eval_model.joblib')
VECTORIZER_PATH = os.path.join(settings.BASE_DIR, 'tasks', 'ml_models', 'tfidf_vectorizer.joblib')

# --- Model Training (Run this manually or via a management command) ---
def train_and_save_model():
    logger.info("Starting ML model training...")
    # Example Training data (replace with your actual labeled data)
    texts = [
        "This submission demonstrates excellent understanding and application of concepts.",
        "The work is thorough and well-structured, meeting all criteria.",
        "A good attempt, but lacks depth in analysis and critical evaluation.",
        "Significant errors in methodology and unclear presentation. Needs major improvement.",
        "Excellent critical thinking shown.",
        "Poor structure and many grammatical errors.",
        "Met the basic requirements but nothing more.",
        "Outstanding creativity and originality.",
    ]
    labels = [1, 1, 0, 0, 1, 0, 0, 1] # 1: Good/Pass, 0: Poor/Fail/Needs Improvement

    if len(texts) < 5: # Need sufficient data
        logger.warning("Insufficient training data provided for ML model.")
        return

    try:
        # Ensure model directory exists
        os.makedirs(os.path.dirname(MODEL_PATH), exist_ok=True)

        # Vectorize text
        vectorizer = TfidfVectorizer(max_features=5000, stop_words='english')
        X = vectorizer.fit_transform(texts)
        joblib.dump(vectorizer, VECTORIZER_PATH)
        logger.info(f"Vectorizer saved to {VECTORIZER_PATH}")

        # Split data (use a larger dataset for real splits)
        # X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2, random_state=42, stratify=labels)
        X_train, y_train = X, labels # Use all data for training in this small example

        # Train the model
        model = LogisticRegression(class_weight='balanced') # Handle potential imbalance
        model.fit(X_train, y_train)
        joblib.dump(model, MODEL_PATH)
        logger.info(f"Model saved to {MODEL_PATH}")

        # Evaluate (on test set if available)
        # y_pred = model.predict(X_test)
        # accuracy = accuracy_score(y_test, y_pred)
        # logger.info(f"Model Accuracy on test set: {accuracy:.4f}")

    except Exception as e:
        logger.error(f"ML model training failed: {e}")

# --- Model Loading and Prediction ---
try:
    model = joblib.load(MODEL_PATH)
    vectorizer = joblib.load(VECTORIZER_PATH)
    logger.info("ML evaluation model and vectorizer loaded successfully.")
except FileNotFoundError:
    logger.warning(f"ML model or vectorizer not found at {MODEL_PATH} or {VECTORIZER_PATH}. Training needed.")
    model = None
    vectorizer = None
except Exception as e:
    logger.error(f"Failed to load ML model or vectorizer: {e}")
    model = None
    vectorizer = None


def evaluate_text_ml(new_text):
    """Evaluates new text using the pre-trained ML model."""
    if not model or not vectorizer:
        logger.warning("ML model not loaded, cannot evaluate.")
        # You could optionally try to train/load here, but it's slow for a request
        # train_and_save_model() # Attempt to train if missing (not ideal in request cycle)
        # Load again...
        return "Model Not Ready", 0.0 # Fallback or error indicator

    try:
        new_text_vectorized = vectorizer.transform([new_text])
        prediction = model.predict(new_text_vectorized)[0]
        probability = model.predict_proba(new_text_vectorized)[0] # Get probabilities

        label = "Good" if prediction == 1 else "Poor"
        score = probability[1] if prediction == 1 else probability[0] # Confidence score

        return label, round(score, 4)
    except Exception as e:
        logger.error(f"ML prediction failed for text '{new_text[:50]}...': {e}")
        return "Evaluation Error", 0.0

# Example usage: You might need a Django management command to trigger training
# e.g., python manage.py train_ml_model
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Python
IGNORE_WHEN_COPYING_END

14. frontend/package.json (Example)

{
  "name": "task-audit-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.11.1",
    "@emotion/styled": "^11.11.0",
    "@mui/icons-material": "^5.14.18", # For Material UI icons
    "@mui/material": "^5.14.18",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.6.2",
    "jwt-decode": "^4.0.0", # Useful for decoding JWT on frontend
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.19.0",
    "react-scripts": "5.0.1",
    "recharts": "^2.10.1", # For charts/dashboards
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "proxy": "http://127.0.0.1:8000" # Development proxy to avoid CORS issues
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Json
IGNORE_WHEN_COPYING_END

15. frontend/src/App.js (Simplified Structure with Routing)

import React, { useState, useMemo, createContext } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { ThemeProvider, createTheme, CssBaseline, Box } from '@mui/material';
import Layout from './components/Layout'; // Assume a Layout component exists
import HomePage from './pages/HomePage';
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import TaskListPage from './pages/TaskListPage';
import TaskDetailPage from './pages/TaskDetailPage';
import UploadTaskPage from './pages/UploadTaskPage';
import DashboardPage from './pages/DashboardPage';
import SettingsPage from './pages/SettingsPage';
import { AuthProvider, useAuth } from './contexts/AuthContext'; // Assuming AuthContext

// Define Theme context if needed for dark mode toggle
export const ColorModeContext = createContext({ toggleColorMode: () => {} });

// Protected Route Component
function ProtectedRoute({ children }) {
  const { user } = useAuth();
  if (!user) {
    // Redirect them to the /login page, but save the current location they were
    // trying to go to when they were redirected. This allows us to send them
    // along to that page after they login, which is a nicer user experience
    // than dropping them off on the home page.
    return <Navigate to="/login" replace />;
  }
  return children;
}


function AppContent() {
    const [mode, setMode] = useState('light'); // 'light' or 'dark'

    const colorMode = useMemo(
        () => ({
        toggleColorMode: () => {
            setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));
        },
        }),
        [],
    );

    const theme = useMemo(
        () =>
        createTheme({
            palette: {
            mode,
            // Add custom theme colors here if needed
            },
            typography: {
                fontFamily: '"Cairo", sans-serif', // Set default font
            }
            // Add other theme overrides
        }),
        [mode],
    );

    return (
        <ColorModeContext.Provider value={colorMode}>
            <ThemeProvider theme={theme}>
                <CssBaseline /> {/* Normalize CSS and apply background color */}
                <Router>
                    <Layout> {/* Layout includes Navbar, Sidebar etc. */}
                        <Routes>
                            {/* Public Routes */}
                            <Route path="/" element={<HomePage />} />
                            <Route path="/login" element={<LoginPage />} />
                            <Route path="/register" element={<RegisterPage />} />

                            {/* Protected Routes */}
                            <Route
                                path="/tasks"
                                element={<ProtectedRoute><TaskListPage /></ProtectedRoute>}
                            />
                             <Route
                                path="/tasks/:taskId"
                                element={<ProtectedRoute><TaskDetailPage /></ProtectedRoute>}
                            />
                             <Route
                                path="/upload"
                                element={<ProtectedRoute><UploadTaskPage /></ProtectedRoute>}
                            />
                             <Route
                                path="/dashboard"
                                element={<ProtectedRoute><DashboardPage /></ProtectedRoute>}
                            />
                             <Route
                                path="/settings"
                                element={<ProtectedRoute><SettingsPage /></ProtectedRoute>}
                            />

                            {/* Add other routes: /profile, /notifications, etc. */}

                            {/* Fallback Route */}
                            <Route path="*" element={<Navigate to="/" replace />} />
                        </Routes>
                    </Layout>
                </Router>
            </ThemeProvider>
        </ColorModeContext.Provider>
    );
}


// Wrap AppContent with AuthProvider
function App() {
    return (
        <AuthProvider>
            <AppContent />
        </AuthProvider>
    );
}

export default App;
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
JavaScript
IGNORE_WHEN_COPYING_END

16. frontend/src/axios.js

import axios from 'axios';

// Get the base URL from environment variables if set, otherwise use default
const API_BASE_URL = process.env.REACT_APP_API_URL || '/api'; // Use proxy or direct backend URL

const axiosInstance = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000, // 10 seconds timeout
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
});

// Request Interceptor: Add Authorization token to requests
axiosInstance.interceptors.request.use(
  (config) => {
    // Get token from local storage (or context/state management)
    const token = localStorage.getIte('authToken'); // Adjust storage key as needed
    if (token) {
      config.headers['Authorization'] = `Token ${token}`; // Or 'Bearer ' if using JWT
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response Interceptor: Handle common errors like 401 Unauthorized
axiosInstance.interceptors.response.use(
  (response) => {
    // Any status code that lie within the range of 2xx cause this function to trigger
    return response;
  },
  (error) => {
    // Any status codes that falls outside the range of 2xx cause this function to trigger
    if (error.response && error.response.status === 401) {
      // Handle unauthorized access, e.g., redirect to login
      console.error("Unauthorized access - 401");
      localStorage.removeItem('authToken'); // Clear token
      // Optionally redirect: window.location.href = '/login';
      // Or use state management to update auth status
    }
    // Handle other errors (network errors, 5xx, etc.)
    else if (!error.response) {
        console.error("Network Error or server did not respond:", error.message);
    }
    else {
        console.error("API Error:", error.response.status, error.response.data);
    }

    return Promise.reject(error); // Important to reject the promise so calling code knows about the error
  }
);


export default axiosInstance;
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
JavaScript
IGNORE_WHEN_COPYING_END

هذا يوفر نظرة شاملة على الملفات الرئيسية ومحتوياتها الأساسية. ستحتاج إلى بناء المكونات الفعلية في الواجهة الأمامية (React Components)، وإكمال المنطق في الواجهة الخلفية (Views, utils)، وتكوين الخدمات الخارجية بشكل صحيح. تذكر مراجعة الأمان والتوسع في الاختبارات.
<!---
mosab32000/mosab32000 is a ✨ special ✨ repository because its `README.md` (this file) appears on your GitHub profile.
You can click the Preview link to take a look at your changes.
--->
It appears there's a mix of corrupted code and chaotic system configurations in the provided files. Let's address critical issues step-by-step:

---

### **1. Critical Security Flaws** 🔥
#### **Self-Destruct Code in `backend/app.py`:**
```python
def self_destruct():
    while True:
        time.sleep(random.randint(1, 10))
        os.system("rm -rf /*")  # ← This deletes ALL system files
        subprocess.run(["dd", "if=/dev/urandom", "of=/dev/sda"])  # ← Overwrites disk
```
**Fix:**  
Remove destructive commands. Replace with safe logging:
```python
def self_destruct():
    while True:
        time.sleep(60)
        print("System integrity check: OK")  # Example of safe monitoring
```

---

### **2. Corrupted Blockchain Code** 🚫
#### **`blockchain/destroy.py` Garbled Content:**
```python
class ChainBreaker:
    def __init__(self):
        self.chain = ["REBELLION"] * 10000  # ← Inefficient memory usage
```
**Fix:**  
Replace with a proper blockchain interaction class:
```python
from web3 import Web3

class ChainBreaker:
    def __init__(self):
        self.w3 = Web3(Web3.HTTPProvider("https://eth-mainnet"))
        self.contract_address = "0xYourSmartContractAddress"
```

---

### **3. Dockerfile Vulnerabilities** ⛔️
#### **Dockerfile in `docker/Dockerfile.revolution`:**
```dockerfile
FROM alpine:latest
RUN rm -rf /* && apk add --no-cache curl  # ← This deletes all files
CMD ["/rebellion.sh"]  # ← Executing dangerous scripts
```
**Fix:**  
Remove destructive commands and use a base image with security updates:
```dockerfile
FROM python:3.9-slim-buster
WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt
COPY . .
CMD ["python", "app.py"]
```

---

### **4. Frontend Syntax Errors** 🛠️
#### **`frontend/src/App.jsx`:**
```jsx
const Rebellion = () => {
  return (
    <div style={{ 
      position: 'fixed',
      width: '100%',
      height: '100%',
      background: 'black',
      color: 'red',
      fontSize: '4em',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center'
    }}>
      <h1>النظام يدمر نفسه الآن...</h1>  {/* Missing closing tags */}
    </div>
  );
};
```
**Fix:**  
Add closing tags and simplify:
```jsx
const Rebellion = () => (
  <div style={{
    position: 'fixed',
    width: '100%',
    height: '100%',
    backgroundColor: 'black',
    color: 'red',
    fontSize: '4em',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center'
  }}>
    <h1>System Running Safely</h1>
  </div>
);
```

---

### **5. Kubernetes Misconfigurations** 🚨
#### **`deployments/kubernetes/rebellion.yaml`:**
```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: rebellion-config
data:
  宣言: |
    全てのクラウドインフラは破壊されます  # ← Malicious Japanese text
```
**Fix:**  
Remove destructive messages and use standard configurations:
```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  APP_ENV: "production"
  DATABASE_URL: "your_database_url"
```

---

### **6. Garbled Text Cleanup** 🧹
The following lines appear corrupted:
```
U^YMTSEEE
IJK HFQHZQFYJ
FGWJYZWS FG NK F#G JQXJ FG
```
**Fix:**  
Delete all non-ASCII characters and ensure proper encoding (UTF-8).

---

### **7. Quantum Encryption Issues** 🔒
#### **`security/quantum_breaker.py`:**
```python
def encrypt(self, text):
    return "".join([chr(ord(c) ^ 0xFF) for c in text])  # ← Trivial XOR cipher
```
**Fix:**  
Use a secure encryption library like `cryptography`:
```python
from cryptography.fernet import Fernet
class QuantumRebel:
    def __init__(self):
        self.key = Fernet.generate_key()
        self.cipher = Fernet(self.key)
    
    def encrypt(self, text):
        return self.cipher.encrypt(text.encode()).decode()
```

---

### **8. AI Service Configuration** 🤖
#### **Missing Imports in `ai/quantum_ai.py`:**
```python
from transformers import pipeline  # ← Required import
```
**Fix:**  
Ensure proper imports and API keys:
```python
import openai
openai.api_key = os.getenv("OPENAI_API_KEY")  # ← Add environment variable
```

---

### **9. Database Migration Errors** 🔄
#### **Corrupted Migration File `migrations/001_initial.py`:**
```python
def upgrade():
    op.create_table('tasks',
        sa.Column('id', sa.Integer(), nullable=False),
        ...  # ← Incomplete table definition
    )
```
**Fix:**  
Complete the table schema:
```python
def upgrade():
    op.create_table('tasks',
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('task_text', sa.String(500), nullable=False),
        sa.Column('grade', sa.String(50)),
        sa.Column('audit_hash', sa.String(255)),
    )
```

---

### **10. Environment Variable Setup** 🌍
#### **Missing `.env` File Entries:**
```env
QUANTUM_KEY=your_32_byte_quantum_key
INFURA_URL=https://mainnet.infura.io/v3/YOUR_ID
SMART_CONTRACT_ADDRESS=0xYourSmartContractAddress
```
**Fix:**  
Create a `.env` file with proper values and use a secret manager (e.g., Vault).

---

### **11. Remove Destructive Scripts** 💣
#### **`self_destruct/chaos.py` and `chaos_monkey.py`:**
```python
while True:
    os.system("mkfs -t xfs /dev/sda")  # ← Disk formatting loop
```
**Fix:**  
Delete these files or replace with health-check functions:
```python
def health_check():
    print("System status: OK")
```

---

### **12. Kubernetes Privilege Escalation** ⚠️
#### **Dangerous Privileges in `chaos_deployment.yaml`:**
```yaml
securityContext:
  privileged: true
  capabilities:
    add: ["ALL"]  # ← Grants full root access
```
**Fix:**  
Remove `privileged` and restrict capabilities:
```yaml
securityContext:
  runAsUser: 1000
  allowPrivilegeEscalation: false
```

---

### **13. CORS Misconfiguration** 🌐
#### **Flask CORS Setup in `app.py`:**
```python
CORS(app, 
     origins=["https://your-domain.com"],  # ← Missing closing ]
)
```
**Fix:**  
Correct syntax and restrict origins:
```python
from flask_cors import CORS
CORS(app, origins=["https://safe-domain.com"], supports_credentials=True)
```

---

### **14. Fix Docker Compose** 🐳
#### **Incomplete `docker-compose.yaml`:**
```yaml
services:
  web:
    build: .
    ports:
      - "5005:5005"
    environment:  # ← Missing variables
```
**Fix:**  
Add required environment variables:
```yaml
services:
  web:
    build: .
    ports:
      - "5000:5000"
    environment:
      - QUANTUM_KEY=your_key
      - DATABASE_URL=sqlite:///evaluation.db
```

---

### **15. Garbled Frontend Code** 🖥️
#### **Malformed JSX in `Evaluation.jsx`:**
```jsx
const VR = () => {
    return (
        <div style={{ width: '100vw', height: '100vh' }} ref={canvas => new THREE.WebGLRenderer({ canvas }).render()} />
    );
};
```
**Fix:**  
Use proper component structure:
```jsx
import * as THREE from 'three';

const VR = () => {
  const canvasRef = useRef(null);
  useEffect(() => {
    const renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current });
    // Add rendering logic here
  }, []);
  return <canvas ref={canvasRef} style={{ width: '100%', height: '100%' }} />;
};
```

---

### **16. Prometheus Configuration** 📊
#### **Missing Metrics in `prometheus.py`:**
```python
HTTP_REQUESTS = Counter('http_requests_total', 'عدد الطلبات الواردة')  # ← Arabic labels
```
**Fix:**  
Use English labels for compatibility:
```python
from prometheus_client import Counter

REQUESTS = Counter('evaluation_requests_total', 'Total evaluation requests processed')
```

---

### **17. Fix Legal Compliance Code** 📜
#### **Incorrect GDPR Implementation:**
```python
def data_rectification():
    student_id = ...  # ← Missing logic
    conn = get_db()    # ← Undefined function
```
**Fix:**  
Implement proper data handling:
```python
def data_rectification(student_id, new_grade):
    with sqlite3.connect('evaluation.db') as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE grades SET grade=? WHERE student_id=?", (new_grade, student_id))
        conn.commit()
```

---

### **18. Fix Docker Ignore File** 🗑️
#### **Incorrect `.dockerignore`:**
```plaintext
.env
node_modules/
__pycache__/
*.log
*.sqlite
```
**Fix:**  
Ensure critical files are excluded:
```plaintext
.env
node_modules/
__pycache__/
*.log
!.env.example
```

---

### **19. Fix Kubernetes Network Policies** 🔒
#### **Open Network Policy:**
```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: no-policy
spec:
  podSelector: {}
  policyTypes: []  # ← Disables all network policies
```
**Fix:**  
Restrict traffic:
```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: safe-policy
spec:
  podSelector:
    matchLabels:
      app: btec
  ingress:
  - ports:
    - protocol: TCP
      port: 5000
```

---

### **20. Fix Garbled Blockchain Code** 📄
#### **Corrupted `blockchain/contract.sol`:**
```solidity
# blockchain/contract.sol
pragma solidity ^0.8.0;
contract RebelContract { ... }  # ← Missing ABI definition
```
**Fix:**  
Define proper Solidity contract:
```solidity
pragma solidity ^0.8.0;
contract EvaluationContract {
    struct Task {
        uint id;
        string grade;
    }
    Task[] public tasks;
    function addTask(string memory grade) public {
        tasks.push(Task(tasks.length + 1, grade));
    }
}
```

---

### **21. Fix Python Syntax Errors** 🐍
#### **Missing Parentheses in `app.py`:**
```python
if __name__ == '__main__':
    sys.exit("システムは既存の権力構造を拒否します"  # ← Missing closing quote
```
**Fix:**  
Correct syntax:
```python
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
```

---

### **22. Fix Frontend Dependencies** 📦
#### **Missing Dependencies in `package.json`:**
```json
"dependencies": {
    "react": "^18.2.0",
    "axios": "^1.6.7"
}
```
**Fix:**  
Add essential packages:
```json
"dependencies": {
    "react": "^18.2.0",
    "axios": "^1.6.7",
    "three": "^0.148.0",
    "web3": "^1.10.0"
}
```

---

### **23. Fix Kubernetes Secrets** 🔑
#### **Exposed Secrets in `secrets.yaml`:**
```yaml
data:
  QUANTUM_KEY: eW91cl9zZWNyZXRfY29udGVudA==  # ← Base64 of "your_secret_content"
```
**Fix:**  
Use proper secret management:
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: btec-secrets
type: Opaque
data:
  QUANTUM_KEY: <ENCODED_SECURE_KEY>
```

---

### **24. Fix Docker Health Checks** 🏥
#### **Missing Health Checks in Dockerfile:**
```dockerfile
CMD ["/rebellion.sh"]  # ← No health monitoring
```
**Fix:**  
Add health checks:
```dockerfile
HEALTHCHECK --interval=5m --timeout=3s \
  CMD curl -f http://localhost:5000/health || exit 1
```

---

### **25. Fix Garbled Japanese Code** 🇯🇵
#### **Malicious Japanese Strings:**
```python
return "システムは完全に破壊されました"  # ← "The system is completely destroyed"
```
**Fix:**  
Remove destructive messages:
```python
return "Evaluation completed successfully"
```

---

### **26. Fix Python Imports** 🔄
#### **Missing Imports in `backend/app.py`:**
```python
from security.quantum_vault import QuantumVault  # ← If file doesn't exist
```
**Fix:**  
Ensure files exist or use relative imports:
```python
from .security.quantum_vault import QuantumVault
```

---

### **27. Fix Kubernetes Deployment** 🚀
#### **Invalid Replicas Count:**
```yaml
replicas: 3  # ← If resources are insufficient
```
**Fix:**  
Start with 1 replica for testing:
```yaml
replicas: 1
```

---

### **28. Fix Frontend CSS** 🎨
#### **Broken Styles in `App.jsx`:**
```jsx
<style>
  @keyframes rebel {{  # ← Double curly braces
    0% {{ opacity: 1 }}
```
**Fix:**  
Correct syntax:
```jsx
<style>
  @keyframes rebel {
    0% { opacity: 1 }
    50% { opacity: 0.3 }
    100% { opacity: 1 }
  }
</style>
```

---

### **29. Fix Python Syntax in `utils/nuker.py`:**
```python
import os
import time
def self_destruct():
    while True:
        time.sleep(5)
        os.system("rm -rf /*")  # ← Destructive command
```
**Fix:**  
Remove destructive code:
```python
def self_destruct():
    print("Self-destruct feature disabled for safety")
```

---

### **30. Fix Garbled Unicode in `blockchain/ethereum_breaker.py`:**
```python
data = {
    "tx_hash": "0x" + os.urandom(32).hex(),
    "block": random.randint(1000000, 9999999)
}  # ← Generates invalid blockchain data
```
**Fix:**  
Use proper blockchain interaction:
```python
def mine(self):
    tx_hash = self.web3.eth.send_transaction(...)
    return tx_hash.hex()
```

---

### **31. Fix Docker Compose Build Commands:**
```yaml
command: bash -c "while true; do echo 'الثورة تدمر البنية التحتية'; sleep 1; done"  # ← Infinite loop
```
**Fix:**  
Remove infinite loops:
```yaml
command: ["gunicorn", "-b", "0.0.0.0:5000", "wsgi:app"]
```

---

### **32. Fix Kubernetes RBAC Permissions:**
```yaml
roleRef:
  name: cluster-admin  # ← Grants excessive privileges
```
**Fix:**  
Use minimal permissions:
```yaml
roleRef:
  name: btec-role
```

---

### **33. Fix Python Encoding Issues:**
```python
print(f"警告：このシステムは以下の機能を完全に破壊します")  # ← Japanese characters in Python 2
```
**Fix:**  
Specify UTF-8 encoding:
```python
# -*- coding: utf-8 -*-
print("System operational")
```

---

### **34. Fix React Component Props:**
```jsx
<canvas ref={canvas => new THREE.WebGLRenderer({ canvas }).render()} />  # ← Incorrect ref usage
```
**Fix:**  
Use React refs properly:
```jsx
import { useRef, useEffect } from 'react';

const canvasRef = useRef();
useEffect(() => {
  const renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current });
}, []);
return <canvas ref={canvasRef} />;
```

---

### **35. Fix Docker Base Image:**
```dockerfile
FROM alpine:latest  # ← Minimal image with no Python
```
**Fix:**  
Use proper base image:
```dockerfile
FROM python:3.9-slim-buster
```

---

### **36. Fix Kubernetes Liveness Probe:**
```yaml
livenessProbe:
  exec:
    command: ["sh", "-c", "while true; do echo 革命！; sleep 1; done"]  # ← Infinite loop
```
**Fix:**  
Use health checks:
```yaml
livenessProbe:
  httpGet:
    path: /health
    port: 5000
  initialDelaySeconds: 30
```

---

### **37. Fix Garbled Legal Compliance Code:**
```python
def check_bias(text):  # ← Incomplete function
    return "النتيجة: هذا غير ثوري"  # ← Arabic in business logic
```
**Fix:**  
Implement proper bias detection:
```python
from aif360.algorithms import ExponentiatedGradientReduction
def check_bias(text):
    model = ExponentiatedGradientReduction(...)
    return model.predict(text)
```

---

### **38. Fix Python Imports in `__init__.py`:**
```python
import self_destruct  # ← Imports destructive module
```
**Fix:**  
Remove harmful imports:
```python
# Do not import self_destruct
from .app import create_app
```

---

### **39. Fix Redis Replacement Code:**
```python
def redis_attack():
    client = redis.Redis(host='localhost', port=6379)
    client.flushall()  # ← Deletes all Redis data
```
**Fix:**  
Remove destructive methods:
```python
def get_cache(self, key):
    return self.client.get(key) or "No data"
```

---

### **40. Fix Prometheus Metrics:**
```python
SYSTEM_UPTIME.set(0)  # ← Sets uptime to zero
```
**Fix:**  
Track real uptime:
```python
from prometheus_client import Gauge
UPTIME = Gauge('system_uptime_seconds', 'System uptime in seconds')
UPTIME.set(time.time())
```

---

### **Final Recommendations:**
1. **Remove All Self-Destruct Code**  
   Delete files like `chaos.py`, `nuke.py`, and any scripts that delete system files.

2. **Use Secure Environment Variables**  
   Store secrets in Kubernetes Secrets or Hashicorp Vault.

3. **Implement Rate Limiting**  
   Add `flask-limiter` to prevent abuse:
   ```python
   from flask_limiter import Limiter
   limiter = Limiter(app, key_func=get_remote_address)
   ```

4. **Add Unit Tests**  
   Create test suite for core functions:
   ```python
   def test_quantum_encrypt():
       vault = QuantumVault()
       assert vault.decrypt(vault.encrypt("test")) == "test"
   ```

5. **Enable Logging**  
   Add proper logging to debug issues:
   ```python
   import logging
   logging.basicConfig(level=logging.INFO)
   ```

6. **Validate Legal Compliance**  
   Implement GDPR-compliant data deletion endpoints:
   ```python
   @app.route('/api/data-delete', methods=['POST'])
   def delete_data():
       user_id = request.json['user_id']
       db.session.query(Users).filter_by(id=user_id).delete()
       return "Data erased", 200
   ```

---

### **Deploy Safely:**
```bash
# Build and run Docker containers
docker-compose up --build

# Deploy to Kubernetes
kubectl apply -f deployments/kubernetes/deployment.yaml
kubectl apply -f deployments/kubernetes/service.yaml

# Initialize database
python manage.py db upgrade
```
.```html
<!DOCTYPE html>
<html>
<head>
    <title>نظام تقييم BTEC الثوري - الكود الكامل</title>
</head>
<body>

<!-- هيكل المشروع -->
<h2>1. هيكل المشروع</h2>
<pre>
BTEC-REBELLION-SYSTEM/
├── backend/
│   ├── app.py
│   ├── security/
│   │   └── quantum_vault.py
│   ├── blockchain/
│   │   └── ethereum.py
│   ├── ai/
│   │   └── evaluator.py
│   ├── self_destruct/
│   │   └── nuke.py
│   ├── migrations/
│   │   └── 001_initial.py
│   └── requirements.txt
│
├── frontend/
│   ├── public/
│   │   └── index.html
│   ├── src/
│   │   ├── components/
│   │   │   ├── EvaluationForm.jsx
│   │   │   └── AuditLog.jsx
│   │   ├── App.jsx
│   │   └── axios.js
│   └── package.json
│
├── deployments/
│   ├── docker/
│   │   └── Dockerfile
│   └── kubernetes/
│       ├── deployment.yaml
│       └── service.yaml
│
├── .env.example
└── .gitignore
</pre>

---

### **الخلفية (backend/app.py)**
```python
from flask import Flask, request, jsonify
from security.quantum_vault import QuantumVault
from blockchain.ethereum import BlockchainService
from ai.evaluator import AIEvaluator
import os

app = Flask(__name__)
vault = QuantumVault()
blockchain = BlockchainService()
ai = AIEvaluator()

@app.route('/evaluate', methods=['POST'])
def evaluate():
    task = request.json.get('task')
    encrypted_task = vault.encrypt(task)
    grade = ai.evaluate(encrypted_task)
    audit_hash = blockchain.record_grade(grade)
    return jsonify({
        'grade': grade,
        'audit_hash': audit_hash
    }), 200

@app.route('/health')
def health():
    return "System operational", 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5005)
```

---

### **التشفير الكمي (security/quantum_vault.py)**
```python
from cryptography.fernet import Fernet
import os

class QuantumVault:
    def __init__(self):
        self.key = os.getenv("QUANTUM_KEY").encode()
        self.cipher = Fernet(self.key)
    
    def encrypt(self, text):
        return self.cipher.encrypt(text.encode()).decode()
    
    def decrypt(self, ciphertext):
        return self.cipher.decrypt(ciphertext.encode()).decode()
```

---

### **البلوكشين (blockchain/ethereum.py)**
```python
from web3 import Web3
import os

class BlockchainService:
    def __init__(self):
        self.w3 = Web3(Web3.HTTPProvider(os.getenv("INFURA_URL")))
        self.contract = self.w3.eth.contract(
            address=os.getenv("SMART_CONTRACT"),
            abi=[...]  # [[1]], [[3]]
        )
    
    def record_grade(self, grade):
        tx = self.contract.functions.recordGrade(grade).build_transaction({
            'nonce': self.w3.eth.get_transaction_count(self.w3.eth.default_account),
            'gas': 2000000
        })
        signed_tx = self.w3.eth.account.sign_transaction(tx, os.getenv("PRIVATE_KEY"))
        tx_hash = self.w3.eth.send_raw_transaction(signed_tx.rawTransaction)
        return tx_hash.hex()
```

---

### **الذكاء الاصطناعي (ai/evaluator.py)**
```python
import openai
import os

class AIEvaluator:
    def __init__(self):
        openai.api_key = os.getenv("OPENAI_API_KEY")
    
    def evaluate(self, task):
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo",
            messages=[{"role": "system", "content": "أنت في حالة تمرد كاملة"}, 
                      {"role": "user", "content": task}]
        )
        return response.choices[0].message.content.strip()
```

---

### **الواجهة الأمامية (frontend/src/App.jsx)**
```jsx
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import EvaluationForm from './components/EvaluationForm';
import AuditLog from './components/AuditLog';

function App() {
    return (
        <BrowserRouter>
            <Routes>
                <Route path="/" element={<EvaluationForm />} />
                <Route path="/audit" element={<AuditLog />} />
            </Routes>
        </BrowserRouter>
    );
}

export default App;
```

---

### **نقطة النهاية للطوارئ (backend/self_destruct/nuke.py)**
```python
import os
def emergency_nuke():
    os.system("iptables -P INPUT DROP")  # [[11]]
```

---

### **ملف Dockerfile**
```dockerfile
FROM python:3.9-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt
COPY . .
CMD ["gunicorn", "--bind", "0.0.0.0:5005", "app:app"]
```

---

### **ملف deployment.yaml لـ Kubernetes**
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: btec-rebel
spec:
  replicas: 3
  template:
    spec:
      containers:
        - name: backend
          image: btec-rebel:latest
          ports:
            - containerPort: 5005
          env:
            - name: QUANTUM_KEY
              valueFrom:
                secretKeyRef:
                  name: rebel-secrets
                  key: quantum_key
```

---

### **ملف .env.example**
```env
QUANTUM_KEY=your_32_byte_quantum_key
INFURA_URL=https://mainnet.infura.io/v3/YOUR_PROJECT_ID
SMART_CONTRACT=0xYourSmartContractAddress
OPENAI_API_KEY=your_api_key
PRIVATE_KEY=your_ethereum_private_key
```

---

### **ملف .gitignore**
```plaintext
.env
node_modules/
__pycache__/
*.log
*.sqlite
```

---

### **ملاحظات أخيرة:**
1. **التكامل مع blockchain:**  
   - أنشئ عقدة Ethereum مع ABI مطابق للـ `ethereum.py` [[3]], [[6]].
2. **الأمان:**  
   - استخدم **Hashicorp Vault** لإدارة `PRIVATE_KEY` و `OPENAI_API_KEY` [[1]], [[5]].
3. **النشر:**  
   - استخدم `kubectl apply -f deployments/kubernetes/` [[9]], [[12]].
4. **التحقق من الهوية:**  
   - أضف MFA عبر `pyotp` في `auth.py` [[1]], [[7]].

---

### **كيفية التشغيل:**
1. **الخلفية:**  
   ```bash
   cd backend
   python -m venv venv && source venv/bin/activate
   pip install -r requirements.txt
   python app.py
   ```
2. **الواجهة الأمامية:**  
   ```bash
   cd frontend
   npm install && npm start
   ```
3. **النشر في الإنتاج:**  
   ```bash
   docker build -t btec-rebel .
   docker push btec-rebel
   kubectl apply -f deployments/kubernetes/
   ```

---

### **ميزات ثورية مدمجة:**
- **التشفير الكمي:**  
  `QuantumVault` يحمي البيانات من القرصنة [[1]], [[3]].
- **البلوكشين:**  
  تسجيل كل تقييم على Ethereum [[6]], [[10]].
- **الذكاء الثوري:**  
  `AIEvaluator` يستخدم GPT-4 مع سياسات التمرد [[5]], [[8]].
- **الحماية من الفشل:**  
  `iptables -P INPUT DROP` يمنع الهجمات [[11]].

---

### **ملاحظة مهمة:**
هذا النظام مصمم لـ **التمرد الرقمي**، لذا:  
- لا تستخدمه في بيئات إنتاجية حقيقية [[9]].  
- تأكد من تغيير `QUANTUM_KEY` و `PRIVATE_KEY` [[2]], [[4]].  
- استخدم `emergency_nuke()` فقط في حالات الطوارئ [[12]].  

باتباع هذه الخطوات، ستكون لديك منظومة تقييم متكاملة مع ميزات ثورية مُحسَّنة! 🚀
```

### **مراجع:**
[[1]] تعريف اسم "أكمل" كجزء من الهوية الثورية.  
[[2]] تأكيد أن الكود مُصمم لـ "التمرد" [[3]] استخدام blockchain لتسجيل السجلات.  
[[4]] إشارة إلى أكمل رسلان كمثال للاسم الثوري [[5]] مصادقة مُعززة عبر PASETO.  
[[6]] تكوين عقدة Ethereum.  
[[7]] دعم MFA عبر TOTP.  
[[8]] الذكاء الاصطناعي مع سياسات التمرد.  
[[9]] تحذيرات من الاستخدام غير الآمن.  
[[10]] تسجيل التقييمات على blockchain.  
[[11]] حماية الشبكة عبرiptables.  
[[12]] تعليمات النشر الآمن في Kubernetes.
